syntax = "proto3";

// Service that will be the main api for the league runner service. 
import "google/protobuf/empty.proto";
import "proto_api/shared/games.proto";

service LeagueRunner {
    // Will rqeuest a set of agents to run games for. Any given main agent 
    // should only belong to one `GameRunner` at a time to prevent multiple 
    // people from training the same agents at once.
    //
    // TODO(sturdyplum) Maybe the best idea would be to let multiple people 
    // train a main agent at once but only keep the best as the main agent and 
    // make the rest copies. 
    rpc RequestAgents (AgentRequest) returns (AgentResponse) {}

    // Will return a list of games to play. 
    rpc RequestGames (GameRequest) returns (GameResponse) {}

    // Used to report the results of playing all the games in a GameReponse 
    // (along with any updated network for main agents).
    rpc ReportResults (ReportRequest) returns (google.protobuf.Empty) {}
}

message AgentRequest {
    // TODO(sturdyplum) how to authenticate this request.
    
    // Number of agents to include. There should be some server wide minimum in 
    // order to prevent some clients from having too small a pool.
    int32 number_of_agents = 1;
}

message AgentResponse {
    repeated Agent agents = 1;

    // id that will be used to keep track of client. 
    int64 uuid = 2;
}

message GameRequest {
    // id recived during a RequestAgents.
    int64 uuid = 2;
}

message GameResponse {
    // List of games that game runner should run.
    repeated Game games = 1;
}

message ReportRequest {
    // Results of games.
    repeated GameResult results = 1;
}